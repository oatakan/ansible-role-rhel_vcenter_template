---

- name: Initialize template_found to false
  ansible.builtin.set_fact:
    template_found: false

- name: Block for provision-time preflight checks
  block:
    - name: Check if ISO file exists on datastore
      community.vmware.vsphere_file:
        host: "{{ lookup('env', 'VMWARE_HOST') | default(providers.vcenter.hostname) }}"
        username: "{{ lookup('env', 'VMWARE_USER') | default(providers.vcenter.username) }}"
        password: "{{ lookup('env', 'VMWARE_PASSWORD') | default(providers.vcenter.password) }}"
        validate_certs: false
        datacenter: "{{ providers.vcenter.datacenter }}"
        datastore: "{{ providers.vcenter.datastore }}"
        path: "{{ datastore_iso_folder }}/{{ iso_file_name }}"
        state: file
      register: os_iso_file
      failed_when: false

    - name: Check vCenter information
      community.vmware.vmware_about_info:
        hostname: "{{ lookup('env', 'VMWARE_HOST') | default(providers.vcenter.hostname) }}"
        username: "{{ lookup('env', 'VMWARE_USER') | default(providers.vcenter.username) }}"
        password: "{{ lookup('env', 'VMWARE_PASSWORD') | default(providers.vcenter.password) }}"
        validate_certs: false
      register: vcenter_about_info
      failed_when: false
  when: role_action == 'provision'

- name: Gather info for registered virtual machine templates
  community.vmware.vmware_vm_info:
    hostname: "{{ lookup('env', 'VMWARE_HOST') | default(providers.vcenter.hostname) }}"
    username: "{{ lookup('env', 'VMWARE_USER') | default(providers.vcenter.username) }}"
    password: "{{ lookup('env', 'VMWARE_PASSWORD') | default(providers.vcenter.password) }}"
    validate_certs: false
    vm_type: template
    vm_name: "{{ template.name }}"
  register: template_facts
  failed_when: false

- name: Block for handling existing template (Ansible < 2.8.0)
  block:
    - name: Set template_found to true if template exists (Ansible < 2.8.0)
      ansible.builtin.set_fact:
        template_found: true

    - name: Fail if existing template found and remove_template is false (Ansible < 2.8.0)
      ansible.builtin.fail:
        msg: "Existing template found on vcenter: {{ template.name }}"
      when: not remove_template
  when:
    - ansible_version.full is version('2.8.0', '<')
    - template_facts is success
    - template_facts.virtual_machines is defined
    - template is defined
    - template_facts.virtual_machines[template.name] is defined

- name: Block for handling existing template (Ansible >= 2.8.0)
  block:
    - name: Set template_found to true if template exists (Ansible >= 2.8.0)
      ansible.builtin.set_fact:
        template_found: true

    - name: Fail if existing template found and remove_template is false (Ansible >= 2.8.0)
      ansible.builtin.fail:
        msg: "Existing template found on vcenter: {{ template.name }}"
      when: not remove_template
  when:
    - ansible_version.full is version('2.8.0', '>=')
    - template_facts is success
    - template_facts.virtual_machines is defined
    - template is defined
    - template.name in (template_facts.virtual_machines | map(attribute='guest_name') | list)