---

- name: check if iso file exists
  vsphere_file:
    host: "{{ lookup('env', 'VMWARE_HOST')|default(providers.vcenter.hostname) }}"
    username: "{{ lookup('env', 'VMWARE_USER')|default(providers.vcenter.username) }}"
    password: "{{ lookup('env', 'VMWARE_PASSWORD')|default(providers.vcenter.password) }}"
    validate_certs: no
    datacenter: "{{ providers.vcenter.datacenter }}"
    datastore: "{{ providers.vcenter.datastore }}"
    path: "{{ datastore_iso_folder }}/{{ iso_file_name }}"
    state: file
  register: os_iso_file
  failed_when: false

- debug:
    msg: "{{ os_iso_file | default('') }}"

- name: gather only registered virtual machine templates
  vmware_vm_info:
    hostname: "{{ lookup('env', 'VMWARE_HOST')|default(providers.vcenter.hostname) }}"
    username: "{{ lookup('env', 'VMWARE_USER')|default(providers.vcenter.username) }}"
    password: "{{ lookup('env', 'VMWARE_PASSWORD')|default(providers.vcenter.password) }}"
    validate_certs: no
    vm_type: template
  register: template_facts

- block:
    - name: set template_found to yes
      set_fact:
        template_found: yes

    - name: fail with message
      fail:
        msg: "Existing template found on vcenter: {{ template.name }}"
      when: not template_force|bool
  when:
    - ansible_version.full is version('2.8.0', '<')
    - template_facts is success
    - template_facts.virtual_machines is defined
    - template is defined
    - template_facts.virtual_machines[template.name] is defined

- block:
    - name: set template_found to yes
      set_fact:
        template_found: yes

    - name: fail with message
      fail:
        msg: "Existing template found on vcenter: {{ template.name }}"
      when: not template_force|bool
  when:
    - ansible_version.full is version('2.8.0', '>=')
    - template_facts is success
    - template_facts.virtual_machines is defined
    - template is defined
    - template.name in (template_facts.virtual_machines | map(attribute='guest_name') | list)