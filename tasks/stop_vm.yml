---

- block:

#    - name: run scheduled shutdown task
#      vmware_vm_shell:
#        hostname: "{{ lookup('env', 'VMWARE_HOST')|default(providers.vcenter.hostname) }}"
#        username: "{{ lookup('env', 'VMWARE_USER')|default(providers.vcenter.username) }}"
#        password: "{{ lookup('env', 'VMWARE_PASSWORD')|default(providers.vcenter.password) }}"
#        datacenter: "{{ providers.vcenter.datacenter }}"
#        validate_certs: no
#        vm_id: "{{ template.name }}"
#        vm_username: root
#        vm_password: "{{ local_administrator_password }}"
#        vm_shell: '/sbin/shutdown'
#        vm_shell_args: ' -P now'

    - name: shutdown guest vm
      vmware_guest:
        hostname: "{{ lookup('env', 'VMWARE_HOST')|default(providers.vcenter.hostname) }}"
        username: "{{ lookup('env', 'VMWARE_USER')|default(providers.vcenter.username) }}"
        password: "{{ lookup('env', 'VMWARE_PASSWORD')|default(providers.vcenter.password) }}"
        validate_certs: no
        datacenter: "{{ providers.vcenter.datacenter }}"
        cluster: "{{ providers.vcenter.cluster }}"
        uuid: "{{ instance.instance.uuid | default(omit) }}"
        name: "{{ template.name }}"
        state: shutdownguest
      async: 7200
      poll: 0
      register: shutdown
      when: template is defined

    - name: wait for server to stop responding
      wait_for:
        host: "{{ template_vm_ip_address }}"
        port: "{{ vm_ansible_port | default('22') }}"
        timeout: 120
        state: stopped

    - name: wait for vm status to be poweredoff
      vmware_guest_info:
        hostname: "{{ lookup('env', 'VMWARE_HOST')|default(providers.vcenter.hostname) }}"
        username: "{{ lookup('env', 'VMWARE_USER')|default(providers.vcenter.username) }}"
        password: "{{ lookup('env', 'VMWARE_PASSWORD')|default(providers.vcenter.password) }}"
        datacenter: "{{ providers.vcenter.datacenter }}"
        validate_certs: no
        name: "{{ template.name }}"
      register: vm_fact
      until: vm_fact.instance is defined and vm_fact.instance.hw_power_status == 'poweredOff'
      delay: 5
      retries: 30

  rescue:
    - name: ignoring any error
      debug:
        msg: "ignoring error..."

- name: stop vm
  vmware_guest:
    hostname: "{{ lookup('env', 'VMWARE_HOST')|default(providers.vcenter.hostname) }}"
    username: "{{ lookup('env', 'VMWARE_USER')|default(providers.vcenter.username) }}"
    password: "{{ lookup('env', 'VMWARE_PASSWORD')|default(providers.vcenter.password) }}"
    validate_certs: no
    datacenter: "{{ providers.vcenter.datacenter }}"
    cluster: "{{ providers.vcenter.cluster }}"
    uuid: "{{ instance.instance.uuid | default(omit) }}"
    name: "{{ template.name }}"
    cdrom: []
    state: poweredoff
  async: 7200
  poll: 0
  register: stop
  when: template is defined

- name: wait for instance to stop
  async_status:
    jid: "{{ stop.ansible_job_id }}"
  register: instance
  until: instance.finished
  retries: "{{ instance_wait_retry_limit }}"
  delay: 10

- name: reconfigure vm
  vmware_guest:
    hostname: "{{ lookup('env', 'VMWARE_HOST')|default(providers.vcenter.hostname) }}"
    username: "{{ lookup('env', 'VMWARE_USER')|default(providers.vcenter.username) }}"
    password: "{{ lookup('env', 'VMWARE_PASSWORD')|default(providers.vcenter.password) }}"
    validate_certs: no
    datacenter: "{{ providers.vcenter.datacenter }}"
    cluster: "{{ providers.vcenter.cluster }}"
    uuid: "{{ instance.instance.uuid | default(omit) }}"
    name: "{{ template.name }}"
    cdrom:
      - controller_number: 0
        unit_number: 0
        state: absent
      - controller_number: 0
        unit_number: 1
        state: absent
    state: present
  when: template is defined