---
- name: Block for alternative ISO creation and upload
  block:
    - name: Create temporary directory for ISO contents
      ansible.builtin.file:
        path: "{{ temp_directory }}/ks_iso"
        state: directory
        mode: "0755"

    - name: Create ks.cfg file from template
      ansible.builtin.template:
        src: "{{ linux_ks_folder }}/ks.cfg.j2"
        dest: "{{ temp_directory }}/ks_iso/ks.cfg"
        mode: "0644"

    - name: Download template iso file
      ansible.builtin.get_url:
        url: "{{ template_iso_url }}"
        dest: "{{ temp_directory }}/{{ distro_name }}_template.iso"
        mode: "0644"
      register: download_template_iso
      until: download_template_iso is success
      delay: 3
      retries: 5

    - name: Set list of directories to copy
      ansible.builtin.set_fact:
        template_iso_list_of_directories_to_extract:
          - /EFI
          - /images
          - /isolinux

    - name: Get a list of files from template iso
      ansible.builtin.shell: >
        set -o pipefail &&
        isoinfo -f -R -i {{ playbook_dir }}/{{ temp_directory }}/{{ distro_name }}_template.iso |
        grep -E "^{{ template_iso_list_of_directories_to_extract | join('|^') }}"
      register: template_iso_list_of_files
      changed_when: false

    - name: Copy files from template iso to target
      ansible.builtin.shell: |
        set -o pipefail &&
        isoinfo -f -R -i {{ playbook_dir }}/{{ temp_directory }}/{{ distro_name }}_template.iso |\
        grep -E "^{{ template_iso_list_of_directories_to_extract | join('|^') }}" | while read line; do
          d=$(dirname $line)
          od=".${d}"
          [ -f $od ] && rm -f $od
          [ -d $od ] || mkdir -p $od
          [ -d ".${line}" ] || isoinfo -R -i \
          {{ playbook_dir }}/{{ temp_directory }}/{{ distro_name }}_template.iso -x $line > ".${line}"
        done
      args:
        chdir: "{{ playbook_dir }}/{{ temp_directory }}/ks_iso"
      changed_when: false

    - name: Modify boot files for kickstart
      ansible.builtin.replace:
        path: "{{ playbook_dir }}/{{ temp_directory }}/ks_iso{{ item }}"
        regexp: "(quiet)$"
        replace: "\\1 ks=cdrom:/ks.cfg"
      loop:
        - /EFI/BOOT/grub.cfg
        - /EFI/BOOT/BOOT.conf
        - /isolinux/isolinux.cfg
      when: item in template_iso_list_of_files.stdout_lines

    - name: Change EFI boot timeout to 3 seconds
      ansible.builtin.lineinfile:
        path: "{{ playbook_dir }}/{{ temp_directory }}/ks_iso/EFI/BOOT/grub.cfg"
        regexp: "^set timeout="
        line: "set timeout=3"
      when: ('/EFI/BOOT/grub.cfg' in template_iso_list_of_files.stdout_lines)

    - name: Change isolinux boot timeout to 3 seconds
      ansible.builtin.lineinfile:
        path: "{{ playbook_dir }}/{{ temp_directory }}/ks_iso/isolinux/isolinux.cfg"
        regexp: "^timeout"
        line: "timeout 30" # 30 tenths of a second = 3 seconds
      when: ('/isolinux/isolinux.cfg' in template_iso_list_of_files.stdout_lines)

    - name: Create final iso file with mkisofs
      ansible.builtin.command: >
        mkisofs -U -A "KS_ISO" -V "KS_ISO"
        -volset "KS_ISO" -J -joliet-long -r -v -T -x ./lost+found
        -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4
        -boot-info-table -eltorito-alt-boot -e images/efiboot.img -no-emul-boot
        -o {{ playbook_dir }}/{{ temp_directory }}/linux_{{ distro_name }}_ks_autogen.iso .
      args:
        chdir: "{{ playbook_dir }}/{{ temp_directory }}/ks_iso"
      changed_when: false

    - name: Include datastore upload tasks
      ansible.builtin.include_tasks: datastore_upload.yml

  always:
    - name: Remove temporary ISO files and directory
      ansible.builtin.file:
        path: "{{ temp_directory }}/{{ item }}"
        state: absent
      loop:
        - linux_{{ distro_name }}_ks_autogen.iso
        - "{{ distro_name }}_template.iso"
        - ks_iso/
